package cards;

import java.util.Arrays;

public class PokerCheck {
	private PokerPlayer player;
	private static PokerCards[] cardsInGame;
	private int cardsFigures[];
	private int cardsColors[];
	private int highestCard;
	
	PokerCheck(PokerPlayer playerFromGame ) {
		this.player = playerFromGame;
	}
	
	public PokerCards[] getCards() {
		return cardsInGame;
	}
	
	
	public void setCards(PokerCards[] cardsFromGame) {
		cardsInGame = new PokerCards[5];
		for(int i = 0; i < 5; i++) 
			cardsInGame[i] = cardsFromGame[i];
	}
	
	public PokerPlayer getPlayer() {
		return player;
	}
	public void setPlayer(PokerPlayer newPlayer) {
		player = newPlayer;
	}
	
	public void sortingCards(PokerDeck deck) {
		this.cardsFigures = new int[7];
		this.cardsColors = new int[7];
		// Getting players cards figure and color
		cardsFigures[0] = deck.getCardFigure(this.player.getCard(0));
		cardsColors[0] = deck.getCardColor(this.player.getCard(0));
		cardsFigures[1] = deck.getCardFigure(this.player.getCard(1));
		cardsColors[1] = deck.getCardFigure(this.player.getCard(1));
		// Getting cards figure from game
		int k = 0;
		for(int i = 2; i < 7; i++) {
			cardsFigures[i] = cardsInGame[k].getCardFigure();
			cardsColors[i] = cardsInGame[k].getCardColor();
					k++;
		}		
		Arrays.sort(cardsFigures); // sorting cards
	}
	public void showSorted() {
		for(int i =0; i < 7; i++)
		System.out.println(this.cardsFigures[i]);
	}
	public void checkHandRanking() {
	}
	public boolean isStraightFlush() {
		int k = 0;
		int straight = 0;
		boolean isStraight = false;
		if(cardsFigures[0] == 9) // for Jack there is no chance to straight Flush
			return false;
		
		while(k < 3){
			for(int i = k; i < k+4; i++){
				if(isNextInRow(cardsFigures[k], cardsFigures[k+1]))
					straight++;
			}
			if(straight == 4) {
				this.highestCard  = cardsFigures[k+4]; // set highest card 
				isStraight = true;
			}
			else
				straight = 0;
			k++;
		}
		return isStraight;
	}
	
	public static boolean isNextInRow(int first, int next) {
		return (next == first+1);
	}
	

}
